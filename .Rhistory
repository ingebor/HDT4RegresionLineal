#Accuracy : 0.8889
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
fitLM<-lm(y~. data = train)
summary(fitLM)
#El modelo se ajusta perfectamente a los datos
#Multiple R-squared:      1,	Adjusted R-squared:      1
#Advertencia que pone R:
# Warning message:
#   In summary.lm(fitLM) : essentially perfect fit: summary may be unreliable
predicted<-predict(fitLM,newdata = test)
test$prediccion <- predicted
cor(datos$Petal.Length,datos$Petal.Width, method = "spearman")
#La correlación es del 93% con Spearman porque las variables no siguen una distrbución normal
#Esta correlación tan fuerte está interfiriendo en el modelo.
#Quitar la variable Petal.Width
cor(datos$Petal.Length,datos$Petal.Width, method = "spearman")
cor(train)
knitr::opts_chunk$set(echo = TRUE)
#"C:/Users/andre/OneDrive/Documentos/HT1.Analisis-Exploratorio"
#Ingebor Rubio/Desktop/Trabajos/Quinto Semestre/Mineria/HDT4RegresionLineal
#C:/Users/Andree/Documents/GitHub/HDT3-ArbolesDeDecision
#"C:/Users/andre/OneDrive/Documentos/HDT4RegresionLineal"
knitr::opts_knit$set(root.dir="C:/Users/andre/OneDrive/Documentos/HDT4RegresionLineal")
datosCasas <- read.csv("train.csv")
summary(datosCasas)
str(datosCasas)
table(unlist(lapply(datosCasas, class)))
barplot(datosCasas$LotArea, xlab= "Lote", ylab = "Metros cuadrados", main="Tamaño del lote en metros cuadrados")
plot(x = datosCasas$LotArea, y= datosCasas$SalePrice, xlab= "Tamaño del lote", ylab= "Precio de venta", main = "Correlación entre tamaño del lote y precio de la casa")
abline(lm(datosCasas$SalePrice ~ datosCasas$LotArea), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$HouseStyle)
tipo_vivienda <-datosCasas$HouseStyle
mostrar <- (ggplot(data=df, aes(x=tipo_vivienda)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal())
print(mostrar + ggtitle("Tipo de vivienda"))
library(ggplot2)
df <- as.data.frame(datosCasas$YearBuilt)
anio_construccion <-datosCasas$YearBuilt
mostrar <- ggplot(data=df, aes(x=anio_construccion)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Año de construcción"))
plot(x = datosCasas$YearBuilt, y= datosCasas$SalePrice, xlab= "Año de construccion", ylab= "Precio de venta", main = "Correlación entre precio de la casa y su año de construccion")
abline(lm(datosCasas$SalePrice ~ datosCasas$YearBuilt), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$TotalBsmtSF)
metros_cuadrados_sotano <-datosCasas$TotalBsmtSF
mostrar <- ggplot(data=df, aes(x=metros_cuadrados_sotano)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Metros cuadrados del sótano"))
plot(x = datosCasas$TotalBsmtSF, y= datosCasas$SalePrice, xlab= "Total de mestros cuadrados del sotano", ylab= "Precio de venta", main = "Correlación entre precio de venta y total de metros cuadrados del sotano")
abline(lm(datosCasas$SalePrice ~ datosCasas$TotalBsmtSF), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$X1stFlrSF)
metros_cuadrados_primer_piso <- datosCasas$X1stFlrSF
mostrar <- ggplot(data=df, aes(x=metros_cuadrados_primer_piso)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Metros cuadrados del primer piso"))
plot(x = datosCasas$X1stFlrSF, y= datosCasas$SalePrice, xlab= "Total de mestros cuadrados del primer piso", ylab= "Precio de venta", main = "Correlación entre precio de venta y total de metros cuadrados \n del primer piso")
abline(lm(datosCasas$SalePrice ~ datosCasas$X1stFlrSF), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$X2ndFlrSF)
metros_cuadrados_segundo_piso <- datosCasas$X2ndFlrSF
mostrar <- ggplot(data=df, aes(x=metros_cuadrados_segundo_piso)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Metros cuadrados segundo piso"))
plot(x = datosCasas$X2ndFlrSF, y= datosCasas$SalePrice, xlab= "Total de mestros cuadrados del segundo piso", ylab= "Precio de venta", main = "Correlación entre precio de venta y total de metros cuadrados \n del segundo piso")
abline(lm(datosCasas$SalePrice ~ datosCasas$X2ndFlrSF), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$TotRmsAbvGrd)
total_cuartos <- datosCasas$TotRmsAbvGrd
mostrar <- ggplot(data=df, aes(x=total_cuartos)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Total de cuartos"))
plot(x = datosCasas$TotRmsAbvGrd, y= datosCasas$SalePrice, xlab= "Total de cuartos sobre el suelo", ylab= "Precio de venta", main = "Correlación entre precio de venta y total de cuartos sobre el suelo")
abline(lm(datosCasas$SalePrice ~ datosCasas$TotRmsAbvGrd), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$GarageCars)
garage_carros <- datosCasas$GarageCars
mostrar <- ggplot(data=df, aes(x=garage_carros)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Tamaño del garage en cantidad de carros"))
plot(x = datosCasas$GarageCars, y= datosCasas$SalePrice, xlab= "Tamaño del garage en capacidad de carros", ylab= "Precio de venta", main = "Correlación entre precio de venta y tamaño del carage en capacidad de carros")
abline(lm(datosCasas$SalePrice ~ datosCasas$GarageCars), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$MoSold)
mes_venta <- datosCasas$MoSold
mostrar <- ggplot(data=df, aes(x=mes_venta)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Mes de venta"))
plot(x = datosCasas$MoSold, y= datosCasas$SalePrice, xlab= "Mes de venta", ylab= "Precio de venta", main = "Correlación entre precio de venta y mes de venta")
abline(lm(datosCasas$SalePrice ~ datosCasas$MoSold), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$YrSold)
ano_venta <- datosCasas$YrSold
mostrar <- ggplot(data=df, aes(x=ano_venta)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Año de venta"))
plot(x = datosCasas$YrSold, y= datosCasas$SalePrice, xlab= "Año de venta", ylab= "Precio de venta", main = "Correlación entre precio de venta y año de venta")
abline(lm(datosCasas$SalePrice ~ datosCasas$YrSold), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$SaleType)
tipo_venta <- datosCasas$SaleType
mostrar <- ggplot(data=df, aes(x=tipo_venta)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Tipo de venta"))
library(ggplot2)
df <- as.data.frame(datosCasas$SaleCondition)
condicion_venta <- datosCasas$SaleCondition
mostrar <- ggplot(data=df, aes(x=condicion_venta)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Condición de venta"))
#datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50)]
library(caret)
porciento <- 70/100
datosCasas$clasificacion <- ifelse(datosCasas$SalePrice <= 251000, "Economicas", ifelse(datosCasas$SalePrice <= 538000, "Intermedias", ifelse(datosCasas$SalePrice <= 755000, "Caras")))
datosCasas$y <- as.numeric(factor(datosCasas$clasificacion))
datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,60,62,63,67,68,69,70,71,72,76,77,78,81,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
summary(fitLM)
#cor(datos)
predicted<-predict(fitLM,newdata = test)
test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
library(caret)
datos <- datosCasas[,c(2,19,20,21,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,62,68,69,70,71,76,77,78,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
#summary(fitLM)
#cor(datos)
#predicted<-predict(fitLM,newdata = test)
#test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
knitr::opts_chunk$set(echo = TRUE)
#"C:/Users/andre/OneDrive/Documentos/HT1.Analisis-Exploratorio"
#Ingebor Rubio/Desktop/Trabajos/Quinto Semestre/Mineria/HDT4RegresionLineal
#C:/Users/Andree/Documents/GitHub/HDT3-ArbolesDeDecision
#"C:/Users/andre/OneDrive/Documentos/HDT4RegresionLineal"
knitr::opts_knit$set(root.dir="C:/Users/andre/OneDrive/Documentos/HDT4RegresionLineal")
datosCasas <- read.csv("train.csv")
summary(datosCasas)
str(datosCasas)
table(unlist(lapply(datosCasas, class)))
barplot(datosCasas$LotArea, xlab= "Lote", ylab = "Metros cuadrados", main="Tamaño del lote en metros cuadrados")
plot(x = datosCasas$LotArea, y= datosCasas$SalePrice, xlab= "Tamaño del lote", ylab= "Precio de venta", main = "Correlación entre tamaño del lote y precio de la casa")
abline(lm(datosCasas$SalePrice ~ datosCasas$LotArea), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$HouseStyle)
tipo_vivienda <-datosCasas$HouseStyle
mostrar <- (ggplot(data=df, aes(x=tipo_vivienda)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal())
print(mostrar + ggtitle("Tipo de vivienda"))
library(ggplot2)
df <- as.data.frame(datosCasas$YearBuilt)
anio_construccion <-datosCasas$YearBuilt
mostrar <- ggplot(data=df, aes(x=anio_construccion)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Año de construcción"))
plot(x = datosCasas$YearBuilt, y= datosCasas$SalePrice, xlab= "Año de construccion", ylab= "Precio de venta", main = "Correlación entre precio de la casa y su año de construccion")
abline(lm(datosCasas$SalePrice ~ datosCasas$YearBuilt), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$TotalBsmtSF)
metros_cuadrados_sotano <-datosCasas$TotalBsmtSF
mostrar <- ggplot(data=df, aes(x=metros_cuadrados_sotano)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Metros cuadrados del sótano"))
plot(x = datosCasas$TotalBsmtSF, y= datosCasas$SalePrice, xlab= "Total de mestros cuadrados del sotano", ylab= "Precio de venta", main = "Correlación entre precio de venta y total de metros cuadrados del sotano")
abline(lm(datosCasas$SalePrice ~ datosCasas$TotalBsmtSF), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$X1stFlrSF)
metros_cuadrados_primer_piso <- datosCasas$X1stFlrSF
mostrar <- ggplot(data=df, aes(x=metros_cuadrados_primer_piso)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Metros cuadrados del primer piso"))
plot(x = datosCasas$X1stFlrSF, y= datosCasas$SalePrice, xlab= "Total de mestros cuadrados del primer piso", ylab= "Precio de venta", main = "Correlación entre precio de venta y total de metros cuadrados \n del primer piso")
abline(lm(datosCasas$SalePrice ~ datosCasas$X1stFlrSF), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$X2ndFlrSF)
metros_cuadrados_segundo_piso <- datosCasas$X2ndFlrSF
mostrar <- ggplot(data=df, aes(x=metros_cuadrados_segundo_piso)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Metros cuadrados segundo piso"))
plot(x = datosCasas$X2ndFlrSF, y= datosCasas$SalePrice, xlab= "Total de mestros cuadrados del segundo piso", ylab= "Precio de venta", main = "Correlación entre precio de venta y total de metros cuadrados \n del segundo piso")
abline(lm(datosCasas$SalePrice ~ datosCasas$X2ndFlrSF), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$TotRmsAbvGrd)
total_cuartos <- datosCasas$TotRmsAbvGrd
mostrar <- ggplot(data=df, aes(x=total_cuartos)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Total de cuartos"))
plot(x = datosCasas$TotRmsAbvGrd, y= datosCasas$SalePrice, xlab= "Total de cuartos sobre el suelo", ylab= "Precio de venta", main = "Correlación entre precio de venta y total de cuartos sobre el suelo")
abline(lm(datosCasas$SalePrice ~ datosCasas$TotRmsAbvGrd), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$GarageCars)
garage_carros <- datosCasas$GarageCars
mostrar <- ggplot(data=df, aes(x=garage_carros)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Tamaño del garage en cantidad de carros"))
plot(x = datosCasas$GarageCars, y= datosCasas$SalePrice, xlab= "Tamaño del garage en capacidad de carros", ylab= "Precio de venta", main = "Correlación entre precio de venta y tamaño del carage en capacidad de carros")
abline(lm(datosCasas$SalePrice ~ datosCasas$GarageCars), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$MoSold)
mes_venta <- datosCasas$MoSold
mostrar <- ggplot(data=df, aes(x=mes_venta)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Mes de venta"))
plot(x = datosCasas$MoSold, y= datosCasas$SalePrice, xlab= "Mes de venta", ylab= "Precio de venta", main = "Correlación entre precio de venta y mes de venta")
abline(lm(datosCasas$SalePrice ~ datosCasas$MoSold), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$YrSold)
ano_venta <- datosCasas$YrSold
mostrar <- ggplot(data=df, aes(x=ano_venta)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Año de venta"))
plot(x = datosCasas$YrSold, y= datosCasas$SalePrice, xlab= "Año de venta", ylab= "Precio de venta", main = "Correlación entre precio de venta y año de venta")
abline(lm(datosCasas$SalePrice ~ datosCasas$YrSold), col = "red")
library(ggplot2)
df <- as.data.frame(datosCasas$SaleType)
tipo_venta <- datosCasas$SaleType
mostrar <- ggplot(data=df, aes(x=tipo_venta)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Tipo de venta"))
library(ggplot2)
df <- as.data.frame(datosCasas$SaleCondition)
condicion_venta <- datosCasas$SaleCondition
mostrar <- ggplot(data=df, aes(x=condicion_venta)) + geom_bar(stat="count", width=0.7, fill = "steelblue")+theme_minimal()
print(mostrar + ggtitle("Condición de venta"))
#datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50)]
library(caret)
porciento <- 70/100
datosCasas$clasificacion <- ifelse(datosCasas$SalePrice <= 251000, "Economicas", ifelse(datosCasas$SalePrice <= 538000, "Intermedias", ifelse(datosCasas$SalePrice <= 755000, "Caras")))
datosCasas$y <- as.numeric(factor(datosCasas$clasificacion))
datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,60,62,63,67,68,69,70,71,72,76,77,78,81,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
summary(fitLM)
#cor(datos)
predicted<-predict(fitLM,newdata = test)
test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
library(caret)
datos <- datosCasas[,c(2,19,20,21,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,62,68,69,70,71,76,77,78,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
#summary(fitLM)
#cor(datos)
#predicted<-predict(fitLM,newdata = test)
#test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
plot(train)
install.packages("corrplot")
?corrplot
fitLM<-lm(y~. data = train)
summary(fitLM)
summary(fitLMPW)
summary(fitLMSpByPL)
summary(fitLM)
summary(fitLM1)
fitLM1<-lm(y ~ Sepal.Length + Petal.Length, data = train)
summary(fitLM1)
fitLM1<-lm(y ~ Sepal.Length + Petal.Length, data = train)
View(fitLM1)
fitLM1<-lm(y ~ Sepal.Length + Petal.Length, data = train)
#Modelo de Regresión lineal
porcentaje<-0.7
datos<-iris
set.seed(123)
datos$y<- as.numeric(datos$Species)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
#-------------------------------------------------
# Regresión Lineal Simple
#-------------------------------------------------
fitLMPW<-lm(Petal.Length~Petal.Width, data = train)
#Estimar el lenght del pétalo a partir de su width
#-------
predL<-predict(fitLMPW, newdata = test)
#Verificando la predicción
resultados<-data.frame(test$Petal.Length,predL)
#Análisis de residuos
# Los residuos se calcula restando la predicción de la variable respuesta
residuales <- test$Petal.Length-predL
#No obstante el modelo ya lo calcula por lo que se pueden usar
# Si se mira el resumen del modelo podemos analizar el comportamiento de los residuos.
summary(fitLMPW)
#En la gráfica Residuals vs Fitted, se puede ver que los residuos se distribuyen de forma
# más o menos aleatoria alrededor de 0
# En el gráfico qq se puede ver que puede ser un gráfico normal
library(ModelMetrics)
rmse(test$Petal.Length,predL)
plot(test$Petal.Length, test$Petal.Width)
points(predL, test$Petal.Width, col="red",pch=15)
par(mfrow = c(2,2))
plot(fitLMPW)
#Predecir la clase de la flor por la longitud del pétalo
fitLMSpByPL<-lm(y~Petal.Length, data = train)
summary(fitLMSpByPL)
# Multiple R-squared:  0.905,	Adjusted R-squared:  0.9041
#El modelo explica los datos en un 90% la predicción debe ser buena
predMSpByPL<-predict(fitLMSpByPL,newdata = test)
resultados1<-data.frame(test$y,round(predMSpByPL,0))
names(resultados1)<-c("real","prediccion")
confusionMatrix(resultados1$real,resultados1$prediccion)
#Accuracy : 0.8889
#-------------------------------------------------
# Regresión Lineal Múltiple
#-------------------------------------------------
fitLM<-lm(y~. data = train)
summary(fitLM)
#El modelo se ajusta perfectamente a los datos
#Multiple R-squared:      1,	Adjusted R-squared:      1
#Advertencia que pone R:
# Warning message:
#   In summary.lm(fitLM) : essentially perfect fit: summary may be unreliable
predicted<-predict(fitLM,newdata = test)
test$prediccion <- predicted
cfm<-confusionMatrix(test$y,test$prediccion)
cfm
#Accuracy : 1
#HAY SUBREAJUSTE. Esto se debe a que hay multicolinealidad en las variables participantes en el modelo
cor(datos$Petal.Length,datos$Petal.Width, method = "spearman")
#La correlación es del 93% con Spearman porque las variables no siguen una distrbución normal
#Esta correlación tan fuerte está interfiriendo en el modelo.
#Quitar la variable Petal.Width
fitLM1<-lm(y ~ Sepal.Length + Petal.Length, data = train)
summary(fitLM1)
fitLM<-lm(y~. data = train)
summary(fitLM)
~Modelo de regresión lineal
cor(datos$Petal.Length,datos$Petal.Width, method = "spearman")
fitLM1<-lm(y ~ Sepal.Length + Petal.Length, data = train)
summary(fitLM1)
#Modelo de Regresión lineal
porcentaje<-0.7
datos<-iris
set.seed(123)
datos$y<- as.numeric(datos$Species)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
fitLMPW<-lm(Petal.Length~Petal.Width, data = train)
summary(fitLMPW)
library(ModelMetrics)
rmse(test$Petal.Length,predL)
plot(test$Petal.Length, test$Petal.Width)
points(predL, test$Petal.Width, col="red",pch=15)
par(mfrow = c(2,2))
plot(fitLMPW)
#Predecir la clase de la flor por la longitud del pétalo
fitLMSpByPL<-lm(y~Petal.Length, data = train)
summary(fitLMSpByPL)
# Multiple R-squared:  0.905,	Adjusted R-squared:  0.9041
#El modelo explica los datos en un 90% la predicción debe ser buena
predMSpByPL<-predict(fitLMSpByPL,newdata = test)
resultados1<-data.frame(test$y,round(predMSpByPL,0))
names(resultados1)<-c("real","prediccion")
confusionMatrix(resultados1$real,resultados1$prediccion)
#Accuracy : 0.8889
#Predecir la clase de la flor por la longitud del pétalo
fitLMSpByPL<-lm(y~Petal.Length, data = train)
summary(fitLMSpByPL)
# Multiple R-squared:  0.905,	Adjusted R-squared:  0.9041
#El modelo explica los datos en un 90% la predicción debe ser buena
predMSpByPL<-predict(fitLMSpByPL,newdata = test)
resultados1<-data.frame(test$y,round(predMSpByPL,0))
names(resultados1)<-c("real","prediccion")
fitLM<-lm(y~. data = train)
summary(fitLM)
library(caret)
datos <- datosCasas[,c(2,19,20,21,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,62,68,69,70,71,76,77,78,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
library(caret)
datos <- datosCasas[,c(2,19,20,21,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,62,68,69,70,71,76,77,78,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
#summary(fitLM)
#cor(datos)
#predicted<-predict(fitLM,newdata = test)
#test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
fitLM<-lm(y~. data = train)
summary(fitLM)
fitLM<-lm(y~. data = train)
summary(fitLM)
#El modelo se ajusta perfectamente a los datos
#Multiple R-squared:      1,	Adjusted R-squared:      1
#Advertencia que pone R:
# Warning message:
#   In summary.lm(fitLM) : essentially perfect fit: summary may be unreliable
predicted<-predict(fitLM,newdata = test)
test$prediccion <- predicted
cfm<-confusionMatrix(test$y,test$prediccion)
cfm
fitLM<-lm(y~. data = train1)
summary(fitLM)
fitLM1<-lm(y ~ Sepal.Length + Petal.Length, data = train)
summary(fitLM1)
fitLM<-lm(y~. data = train)
summary(fitLM)
fitLMh<-lm(y~. data = train)
summary(fitLMh)
fitLM<-lm(y~. data = train)
summary(fitLM)
fitLMh<-lm(y~. data = train)
summary(fitLMh)
#Modelo de Regresión lineal
porcentaje<-0.7
datos<-iris
set.seed(123)
datos$y<- as.numeric(datos$Species)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
fitLM<-lm(y~. data = train)
summary(fitLM)
library(caret)
datos <- datosCasas[,c(2,19,20,21,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,62,68,69,70,71,76,77,78,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
train$y<- as.numeric(factor(datos$clasificacion))
#datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50)]
library(caret)
porciento <- 70/100
datosCasas$clasificacion <- ifelse(datosCasas$SalePrice <= 251000, "Economicas", ifelse(datosCasas$SalePrice <= 538000, "Intermedias", ifelse(datosCasas$SalePrice <= 755000, "Caras")))
datosCasas$y <- as.numeric(factor(datosCasas$clasificacion))
datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,60,62,63,67,68,69,70,71,72,76,77,78,81,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
summary(fitLM)
#cor(datos)
predicted<-predict(fitLM,newdata = test)
test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
View(datos)
library(caret)
datos <- datosCasas[,c(2,19,20,21,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,62,68,69,70,71,76,77,78,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
fitLM<-lm(y~., data = train)
summary(fitLM)
#cor(datos)
#predicted<-predict(fitLM,newdata = test)
#test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
#datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50)]
library(caret)
porciento <- 70/100
datosCasas$clasificacion <- ifelse(datosCasas$SalePrice <= 251000, "Economicas", ifelse(datosCasas$SalePrice <= 538000, "Intermedias", ifelse(datosCasas$SalePrice <= 755000, "Caras")))
datosCasas$y <- as.numeric(factor(datosCasas$clasificacion))
datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,60,62,63,67,68,69,70,71,72,76,77,78,81,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
summary(fitLM)
#cor(datos)
predicted<-predict(fitLM,newdata = test)
test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
#datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50)]
library(caret)
porciento <- 70/100
datosCasas$clasificacion <- ifelse(datosCasas$SalePrice <= 251000, "Economicas", ifelse(datosCasas$SalePrice <= 538000, "Intermedias", ifelse(datosCasas$SalePrice <= 755000, "Caras")))
datosCasas$y <- as.numeric(factor(datosCasas$clasificacion))
datos <- datosCasas[,c(2,4,18,19,20,21,27,35,37,38,39,44,45,46,47,48,49,50,51,52,53,55,57,60,62,63,67,68,69,70,71,72,76,77,78,81,83)]
set.seed(123)
trainRowsNumber<-sample(1:nrow(datos),porciento*nrow(datos))
train<-datos[trainRowsNumber,]
test<-datos[-trainRowsNumber,]
#train$y<- as.numeric(factor(datos$clasificacion))
fitLM<-lm(y~., data = train)
summary(fitLM)
cor(datos)
predicted<-predict(fitLM,newdata = test)
test$prediccion <- predicted
#cfm<-confusionMatrix(test$y,test$prediccion)
#cfm
library(corrplot)
m <- cor(train)
corrplot(m, method = 'square')
cor(train)
summary(datos)
summary(datos)
borrar <- c("YearBuilt","BedroomAbvGr","X1stFlrSF","X2ndFlrSF")
datos2 <- datos[ , !(names(datos) %in% borrar)]
summary(datos2)
